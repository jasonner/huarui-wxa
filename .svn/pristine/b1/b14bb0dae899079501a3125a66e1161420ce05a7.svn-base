const hrp = require('../../api/hrp.js');
import http from '../../utils/http.js';
var productDetailInfo;
Page({
  /**
   * 页面的初始数据
   */
  data: {
    //1.头部banner图
    bannerInfo:[],
    //2.tipTitle详情提示
    productAdvantageInfo:[],
    // 3.产品
    safeguardPlansInfo:[
      {
        planDesc:[]
      }
    ],

    fewNum:1,//默认产品份数
    Protectiontext:"14天",//保障期间默认时间
    effectiveDate: "2017-11-28",//生效日期默认时间
    sexShow:true,//性别是否展示
    BirthdayShow:true,//被保人出生日期是否展示
    initialBirthday:"2017-03-10",
    price:0,//保费
  //公告详情title数据
    titleArr: ['交20年保20年，定制期限，价格恒定', '身故返保费，首年赠绿通及抗癌检测'],
    initialPremiumPaymentPeriod:"20年",
    Protection: [],//保障期间数据
    ProtectionShow: true,//保障期间是否显示
    ProtectionDataChangeNO: true,//保障期间是否可选
    PayDataShow:true,
    PremiumPaymentPeriodData: [],//缴费期间数据
    PayDataChangeSelectNo: true,//缴费期间是否固定可选
    userInfo: {},
    tabArr: {//产品productcode
      curHdIndex: 2258,
      curBdIndex: 2258
    },  
    hasUserInfo: false,
    changeBg:false,
    canIUse: wx.canIUse('button.open-type.getUserInfo'),
    items: [
      { name: 'CHN', value: '', checked: 'true' }
    ],
    sexSelect: ['男', '女'], //性别数据
   //保障期间数据
  },
  // 被保人生日选择
  chooseBirthday: function (e) {
    this.setData({
      date: e.detail.value
    })
  },
  // 被保人性别改变
  bindSexChange: function (e) {
    var that = this;
    this.setData({
      sex: e.detail.value
    })
    that.calInsurePlan();
  } ,
  // 产品选择
  productListSelect: function (e) {
    console.log(productDetailInfo)
      //获取触发事件组件的dataset属性  
      var _datasetId = e.target.dataset.id;
      if(-_datasetId){
          console.log(666)
      }
      console.log("----" + _datasetId + "----");
      var _obj = {};
      _obj.curHdIndex = _datasetId;
      _obj.curBdIndex = _datasetId;
        this.setData({
          tabArr: _obj,
        })
  },
  // 保障期间选择
  ProtectionDataChange: function(e){
    var that = this;
    this.setData({
      ProtectionData: e.detail.value
    })
    var tetx = e.detail.value
    console.log(tetx)
    that.calInsurePlan();
  },
  // 缴费期间选择
  PayDataChange:function(e){
    var that = this;
    this.setData({
      PayData: e.detail.value
    })
    that.calInsurePlan();
  },
  //立即投保确认跳转
  immediatelyInsure: function(){
    wx.navigateTo({
      url: '../insure/insure'
    }) 
  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    var that = this;
    console.log(options)
    http.all([hrp.productInfo({})]).then((data) => {
      for (var i = 0; i < data.length; i++) {
        wx.setNavigationBarTitle({ title: data[i].productName })//动态获取title
        //1.头部banner图获取数据
        this.setData({
          bannerInfo: [
            {
              'productName': data[i].productName,
              "productImageUrl": data[i].bannerInfo.productImageUrl,
              'organizationName': data[i].bannerInfo.organizationName,
              'salesMult': data[i].bannerInfo.salesMult
            }
          ],
        })
        //2.公告渲染
        this.setData({
          productAdvantageInfo: [
            {
             'dispaly': data[i].productAdvantageInfo.dispaly
            }
          ] 
        }) 
        // 3.产品渲染
         this.setData({
           safeguardPlansInfo: data[i].safeguardPlansInfo
         }) 
        // 4.产品介绍渲染
        this.setData({
          'planDesc':data[i].safeguardPlansInfo[0].planDesc
        })
        // 5.保障期间渲染
        var arr = [];
        for (var j = 0; j < data[i].insureInfo.insurePeriod.length;j++){
          console.log(data[i].insureInfo.insurePeriod[j].showContent);
          arr.push(data[i].insureInfo.insurePeriod[j].showContent);
        }
        this.setData({
          Protection: arr,
        })
        // 6.缴费期间渲染
        console.log(data[i].insureInfo.propertyMapperExcel)
        const arr = [];
        for (var k = 0; k < data[i].insureInfo.propertyMapperExcel.length;k++){
          arr.push(data[i].insureInfo.propertyMapperExcel[k].insuredAge)
        }
        this.setData({
          PremiumPaymentPeriodData: arr
        })
        // 7.份数渲染
        if (data[i].insureInfo.maxMult>1){//判断份数是否显示
          this.setData({
            fewNum: data[i].insureInfo.maxMult
          })
        }else{
            this.setData({
              fewNumShow:true
            })

        }
        // 8.保额渲染
        this.setData({
          price: data[i].insureInfo.price
        })
        for (var k = 0; k < data[i].insureInfo.propertyMapperExcel.length;k++){
          arr.push(data[i].insureInfo.propertyMapperExcel[k].insuredAge)
        }
        this.setData({
          PremiumPaymentPeriodData: arr
        })
        console.log(data[i] + "哈哈哈哈")
        this.initSex(data[i]);
      }
      setTimeout(function () {
        that.setData({
          loadingHidden: true
        })
        that.setData({
          modalFlag: true
        })
      }, 100)
    })
   
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {
    var timestamp = Date.parse(new Date());//生效日期
    timestamp = timestamp / 1000;
    console.log("当前时间戳为：" + timestamp);  
    //获取当前时间  
    var n = timestamp * 1000;  
    var date = new Date(n);  
    //年  
    var Y = date.getFullYear();  
    //月  
    var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1);  
    //日  
    var D = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();  
    var effectiveDate = Y+"-"+ M +"-"+ D
    console.log(effectiveDate);
    this.setData({
      effectiveDate: effectiveDate
    })
  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
    console.log(3)
    this.calInsurePlan();
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {
  
  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {
  
  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {
  
  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {
  
  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {
  
  },
  // 1.被保人性别
  initSex: function (productDetailInfo) {
    // 判断是否展示性别录入
    // if(!isLogin) { // 已登录状态
      // 判断insuredType是否仅支持本人投保
      if (productDetailInfo.insureInfo.insuredType == "1") { // 是，仅支持本人购买
        if (customerInfo.sex != "" && customerInfo.sex != "0") // 如果登录用户信息中性别有值，则使用登录用户信息中性别初始化页面
          this.setData({
            sexSelect: [customerInfo.sex]
          })
      } else if (productDetailInfo.insureInfo.insuredType == "2") { // 否，不仅支持本人购买，还支持其他关系人购买
        for (var i = 0;i<productDetailInfo.insureInfo.relationToAppnt.length;i++){
          if (productDetailInfo.insureInfo.relationToAppnt[i].value == "00") {
              // 如果被保人与投保人关系中包含本人，则判断如果登录用户信息中性别有值，则使用登录用户信息中性别初始化页面
            if (productDetailInfo.insureInfo.sex != "" && productDetailInfo.insureInfo.sex != "0"){
              //性别不能选
                if (productDetailInfo.insureInfo.sex=="0"){
                  this.setData({
                    sexSelect: "男"
                  })
           
                }else{
                  this.setData({
                    sexSelect: "女"
                  })
                }
                this.setData({
                  sexChangeDis: true
                })  
              }
            }
        // })
         }
      // // TODO
      //     if (selfRelationFlag && improveInfoFlag) {
      //   //$("#sex").attr("disabled", true);
      //       this.setData({
      //         c: false,
      //       })   
      //     }
      

  // 判断是否区分性别
  if (productDetailInfo.insureInfo.sex == "0") {
      // 不区分，隐藏性别input
      // $("#sex-li").hide();
      this.setData({
        sexShow: false,
      })   
    } else {
      // 区分，判断sessionStorage中是否有已选择性别，有则使用渲染到页面
      // if(buyInfo.sex) {
      //   // $("#sex").val(buyInfo.sex);
      //   this.setData({
      //     sexSelect: [customerInfo.sex]
      //   }) 
      // }
    }

    // 选择性别变更时，触发计算保费方法
      // $("#sex").change(function () {
      //   console.log("性别变更");
      //   calInsurePlan();
      // }) 
    }
  },

//*注意： 重新计算保费 
  calInsurePlan:function(){
    console.log("您选择的保费已经改变了！！！")
  },

//2. 保障期间
  initInsurePeroid: function (productDetailInfo) {
    // 初始化保险期间页面元素
    // 判断保险期间是否配置
    if(productDetailInfo.insureInfo.insurePeriod && productDetailInfo.insureInfo.insurePeriod.length > 0) {
      // 有配置，判断保险期间长度是否大于1
      if (productDetailInfo.insureInfo.insurePeriod.length > 1) {
        // 大于1，页面渲染要做成下拉选择
            this.setData({
              ProtectionDataChangeNO:true
            })
      } else {
        // 等于1，页面渲染要input，同时不能修改readonly
        this.setData({
          ProtectionDataChangeNO: false
        })
      }
  
    } else {
      // 没有，隐藏保险期间input
      this.setData({
        ProtectionShow: false
      })

  // 判断sessionStorage中是否有已选择保险期间，有则使用渲染到页面
      if (orderInfo.insurePeriod) {
        //$(".insurePeriod").val(orderInfo.insurePeriod);
        this.setData({
          initialPremiumPaymentPeriod: orderInfo.insurePeriod
        })
      }
  }
  },
  
// 3.缴费期间
     initPayInterval:function() {
    // 初始化缴费期间页面元素
    // 判断缴费期间是否配置
    if(productDetailInfo.insureInfo.chargePeriod && productDetailInfo.insureInfo.chargePeriod.length > 0) {
      // 有配置，判断缴费期间长度是否大于1
      if (productDetailInfo.insureInfo.chargePeriod.length > 1) {
        // 大于1，页面渲染要做成下拉选择
        this.setData({
          PayDataChangeSelectNo:false
        })
      } else {
        // 等于1，页面渲染要input，同时不能修改readonl
        this.setData({
          PayDataChangeSelectNo: true
        })
      }
    } else {
      // 没有，隐藏缴费期间input
      // $("#chargePeriod-li").hide();
      this.setDate({
        PayDataShow: false  
      })
    }
       

// 判断sessionStorage中是否有已选择缴费期间，有则使用渲染到页面
    if (orderInfo.payInterval) {
      this.setData({
        initialPremiumPaymentPeriod:orderInfo.payInterval
      })
    }
 },
//  4.生效日期
// 初始化生效日期，index看做是选择了第几个tab
initCvalidate:function(index) {
    changeCvalidate(index);
			// 判断sessionStorage中是否有已选择生效日期，有则使用渲染到页面
    if (orderInfo.cvalidDate) {
      this.setData({
        effectiveDate:orderInfo.cvalidDate
      })
    }
    
},

//重置生效日期
changeCvalidate:function(index) {
  // 取itemCode的生效日期类型或保障计划生效日期类型
  if (productDetailInfo.safeguardPlansInfo.length > 1 &&
    productDetailInfo.safeguardPlansInfo[index].planCvalidateType != undefined &&
    productDetailInfo.safeguardPlansInfo[index].planCvalidateType != "") {

    // 当safeguardPlansInfo长度大于1，且对应Index中的planCvalidateType不为空的时候
    var planCvalidate = productDetailInfo.safeguardPlansInfo[index].planCvalidateType;
  } else {
    // 当safeguardPlansInfo长度等于1
    // 判断对应Index中的planCvalidateType不为空
    if (productDetailInfo.safeguardPlansInfo[index].planCvalidateType &&
      productDetailInfo.safeguardPlansInfo[index].planCvalidateType != "") {
      var planCvalidate = productDetailInfo.safeguardPlansInfo[index].planCvalidateType;
    } else {
      // 使用insureInfo中的cvalidDateType作为生效日期类型
      var planCvalidate = productDetailInfo.insureInfo.cvalidDateType;
    }
  }
    // 次日生效
    if (planCvalidate == "1") {
      // 在当前时间上+1天
      var currDate = new Date(new Date().getTime() + 24 * 3600000);
      var month = currDate.getMonth() < 9 ? ('0' + (currDate.getMonth() + 1)) : (currDate.getMonth() + 1);
      var day = currDate.getDate() < 10 ? ('0' + currDate.getDate()) : currDate.getDate();
      var fomateCurrDate = currDate.getFullYear() + "-" + month + "-" + day;
      this.setData({
        effectiveDate: fomateCurrDate
      })
    } else if (planCvalidate == "3") {
      // 当日生效
      // 直接使用当天时间
      var currDate = new Date(new Date().getTime());
      var month = currDate.getMonth() < 9 ? ('0' + (currDate.getMonth() + 1)) : (currDate.getMonth() + 1);
      var day = currDate.getDate() < 10 ? ('0' + currDate.getDate()) : currDate.getDate();
      var fomateCurrDate = currDate.getFullYear() + "-" + month + "-" + day;
      this.setData({
        effectiveDate: fomateCurrDate
      })
    } else {
      // 指定日期生效
      // 判断生效日期起始时间大于(晚于)生效日期控件选择时间 或 生效日期结束时间小于(早于)生效日期控件选择时间
      if (new Date(productDetailInfo.insureInfo.cvalidDateRange.startDay).getTime() > new Date($("#cvalidate-picker").val()).getTime() ||
        new Date($("#cvalidate-picker").val()).getTime() > new Date(productDetailInfo.insureInfo.cvalidDateRange.endDay).getTime()) {
        // 生效日期默认为空
        // $("#cvalidate-picker").val("");
        this.setData({
          effectiveDate: ""
        })
      }
    }
},

// 5.初始化被保人出生日期
initBirthday:function (){
  // 判断是否展示出生日期录入
        if (productDetailInfo.insureInfo.insuredAgeRange.length == 0) {
              this.setData({
                BirthdayShow:false
              })
        }
        if (isLogin) {
          // 判断insuredType是否仅支持本人投保
          if (productDetailInfo.insureInfo.insuredType == "1") {
            // 是，判断用户信息中出生日期是否有值，如果有值则使用用户信息中出生日期渲染页面
            if (customerInfo.birthday != ""){
              // $("#birthday-picker").val(customerInfo.birthday);
              this.setData({
                initialBirthday:customerInfo.birthday
              })
            } 
          } else if (productDetailInfo.insureInfo.insuredType == "2") {
            // 否，不仅支持本人购买，还支持其他关系人购买
            // 循环relationToAppnt
            // 如果被保人与投保人关系中包含本人，则判断如果登录用户信息中出生日期有值，则使用登录用户信息中出生日期初始化页面
            // $.each(productDetailInfo.insureInfo.relationToAppnt, function (k, v) {
            //   if (v.value == "00") {
            //     if (customerInfo.birthday != "")
            //       $("#birthday-picker").val(customerInfo.birthday);
            //     return false;
            //   }
            // })
          
            for (var k = 0; k < productDetailInfo.insureInfo.relationToAppnt;k++){
              if (customerInfo.birthday != ""){
                  //$("#birthday-picker").val(customerInfo.birthday);
                  this.setData({
                    initialBirthday: customerInfo.birthday
                  })
                return false;
              }
            }
          }
        }
        //判断sessionStorage中是否有已选择出生日期，有则使用渲染到页面
        if (buyInfo.birthday)
         // $("#birthday-picker").val(buyInfo.birthday);
            this.setData({
              initialBirthday: buyInfo.birthday
            })

        // 出生日期变更
        this.changeBirthday();
      },

    // 重置被保人出生日期
    changeBirthday: function() {
        console.log("更新日历控件");
        // 初始化出生日期时间控件
        // 当前时间
        var currDate = new Date(new Date().getTime());
        // 当前月份
        var month = currDate.getMonth() < 9 ? ('0' + (currDate.getMonth() + 1)) : (currDate.getMonth() + 1);
        // 当前天数
        var day = currDate.getDate() < 10 ? ('0' + currDate.getDate()) : currDate.getDate();
        // 当前时间 yyyy-MM-dd
        var fomateCurrDate = currDate.getFullYear() + "-" + month + "-" + day;
        // 起始时间
        var startDay = "";
        // 结束时间
        var endDay = fomateCurrDate;
          
        // 判断被保人年龄区间是否有返回值
        if(productDetailInfo.insureInfo.insuredAgeRange.length > 0) {
          // 有返回值
          // 忽略这个If
          if (productDetailInfo.insureInfo.insuredAgeRange[productDetailInfo.insureInfo.insuredAgeRange.length - 1].startDay) {
            startDay = productDetailInfo.insureInfo.insuredAgeRange[productDetailInfo.insureInfo.insuredAgeRange.length - 1].startDay;
          }
          // 忽略这个If
          if (productDetailInfo.insureInfo.insuredAgeRange[productDetailInfo.insureInfo.insuredAgeRange.length - 1].startDay)
            endDay = productDetailInfo.insureInfo.insuredAgeRange[0].endDay;

          // 获取用户输入的生效日期
          //var civalidate = $("#cvalidate-picker").val();
            
          // 投保起始年龄
          var beginParm_birth = productDetailInfo.insureInfo.insuredAgePeriod.beginBirth;
          // 投保结束年龄
          var endParm_birth = productDetailInfo.insureInfo.insuredAgePeriod.endBirth;
          // 投保起始年龄单位
          var beginParmUnit_birth = productDetailInfo.insureInfo.insuredAgePeriod.beginBirthUnit;
          // 投保结束年龄单位
          var endParmUnit_birth = productDetailInfo.insureInfo.insuredAgePeriod.endBirthUnit;

          if (civalidate == undefined || civalidate == "" || civalidate == null) {
            civalidate = new Date();
          }
          // 按投保日计算出生日期范围，默认以当前时间计算
          if (productDetailInfo.insureInfo.insuredAgeType == "1") {
            civalidate = new Date();
          }

          // 设置最小年龄限制，根据不同单位用生效日期减
          var beginDate = new Date();
          if ("D" == beginParmUnit_birth) {
            beginDate = new Date(civalidate).setDate(new Date(civalidate).getDate() - parseInt(beginParm_birth));
          } else if ("Y" == beginParmUnit_birth) {
            beginDate = new Date(civalidate).setFullYear((new Date(civalidate).getFullYear() - parseInt(beginParm_birth))); //获取80年前的时间信息
          }
          // 设置最大年龄限制，根据不同单位用生效日期减
          var endDate = new Date();
          if ("D" == endParmUnit_birth) {
            endDate = new Date(civalidate).setDate(new Date(civalidate).getDate() - parseInt(endParm_birth));
          } else if ("Y" == endParmUnit_birth) {
            endDate = new Date(civalidate).setFullYear((new Date(civalidate).getFullYear() - parseInt(endParm_birth) - parseInt("1"))); //获取80年前的时间信息
            endDate = new Date(endDate).setDate(new Date(endDate).getDate() + parseInt("1"));
          }

          beginDate = new Date(beginDate);
          endDate = new Date(endDate);
          //最小年龄设为生日结束时间
          var emonth = beginDate.getMonth() < 9 ? ('0' + (beginDate.getMonth() + 1)) : (beginDate.getMonth() + 1);
          var eday = beginDate.getDate() < 10 ? ('0' + beginDate.getDate()) : beginDate.getDate();
          endDay = beginDate.getFullYear() + "-" + emonth + "-" + eday;
          //最大年龄设为生日开始时间
          var smonth = endDate.getMonth() < 9 ? ('0' + (endDate.getMonth() + 1)) : (endDate.getMonth() + 1);
          var sday = endDate.getDate() < 10 ? ('0' + endDate.getDate()) : endDate.getDate();
          startDay = endDate.getFullYear() + "-" + smonth + "-" + sday;
          console.log("投保年龄限制开始时间：" + startDay);
          console.log("投保年龄限制结束时间：" + endDay);

          // 存到sessionstorage中
          // buyInfo.insuredBeginDate = startDay;
          // buyInfo.insuredEndDate = endDay;
          

          // 如果计算出的startDay小于等于(早于)出生日期
          
          //控件选择的值 并且计算出的endDate大于等于(晚于)出生日期控件选择的值
          // 则使用出生日期控件选择的值作为defaultBirthday
          if (new Date(startDay).getTime() <= new Date(initialBirthday.getTime() &&
            new Date(initialBirthday).getTime() <= new Date(endDay).getTime())) {
            var defaultBirthday = initialBirthday;
            console.log("设置生日控件默认时间" + defaultBirthday);
          } else {
            // 否则使用endDay和startDay的中间值作为defaultBirthday
            var time = new Date(endDay).getTime() - new Date(startDay).getTime();
            var days = Math.floor(time / (24 * 3600 * 1000)) / 2;
            var midDate = new Date(new Date(startDay).setDate(new Date(startDay).getDate() + days));

            var month = midDate.getMonth() < 9 ? ('0' + (midDate.getMonth() + 1)) : (midDate.getMonth() + 1);
            var day = midDate.getDate() < 10 ? ('0' + midDate.getDate()) : midDate.getDate();
            var midDay = midDate.getFullYear() + "-" + month + "-" + day;
            //$("#birthday-picker").val(midDay);
            this.setData({
              initialBirthday: midDay
            })
            var defaultBirthday = midDay;
            console.log("设置生日控件默认时间" + defaultBirthday);
          }
        } else {
          // 没有
          console.log("不限制投保年龄，默认选中30岁");
          console.log("当前选择出生日期：" + $("#birthday-picker").val());
          // 如果控件中选择的日期小于等于endDay(当前时间)，则还使用控件中选择的日期赋值给defaultBirthday
          if (new Date(initialBirthday).getTime() <= new Date(endDay).getTime()) {
      console.log($("#birthday-picker").val());
      var defaultBirthday = initialBirthday;
      console.log("设置生日控件默认时间" + defaultBirthday);
    } else {
      // 如果控件中选择的日期大于endDay(当前时间)，则使用当前时间减30年作为defaultBirthday
      var midDate = new Date(new Date().setYear(new Date().getYear() - 30))
      var month = midDate.getMonth() < 9 ? ('0' + (midDate.getMonth() + 1)) : (midDate.getMonth() + 1);
      var day = midDate.getDate() < 10 ? ('0' + midDate.getDate()) : midDate.getDate();
      var midDay = midDate.getFullYear() + "-" + month + "-" + day;
      //$("#birthday-picker").val(midDay);
      this.setData({
        initialBirthday: midDay
      })
      var defaultBirthday = midDay;
      console.log("生日控件默认时间" + defaultBirthday);
    }
                }
          
    // 组装obj，用于最后初始化datePicker
    var obj = {};
    console.log("初始化生日控件开始时间" + startDay);
    console.log("初始化生日控件结束时间" + endDay);
    console.log("初始化生日控件默认时间" + defaultBirthday);
    if (startDay != '') {
      obj = {
        minDate: startDay,
        maxDate: endDay,
        value: defaultBirthday,
        change: function (date) {
          console.log("出生日期变更");
          //$("#birthday-picker").val(date);
          this.setData({
            initialBirthday: midDay
          })
          calInsurePlan();
        }
      }
    } else {
      obj = {
        maxDate: endDay,
        value: defaultBirthday,
        change: function (date) {
          console.log("出生日期变更");
          this.setData({
            initialBirthday: data
          })
          calInsurePlan();
        }
      }
    }

    // TODO
    if (selfRelationFlag && customerInfo != null && customerInfo.birthday != null && customerInfo.birthday != "") {
     // $("#birthday-picker").val(customerInfo.birthday);
      this.setData({
        initialBirthday: customerInfo.birthday
      })
    } else {
      // // 初始化datePicker
      // var pickerHtml = $("#birthdayDiv").html();
      // $("#birthday-picker").remove();
      // $("#birthdayDiv").html(pickerHtml);
      // $("#birthday-picker").datePicker(obj);
      this.setData({
        BirthdayShow:false
      })
    }
  }
})