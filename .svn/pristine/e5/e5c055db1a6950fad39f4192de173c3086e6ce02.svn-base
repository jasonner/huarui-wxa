// pages/demo/demo.js
const hrp = require('../../api/hrp.js');
import http from '../../utils/http.js';
const util = require('../../utils/util.js')
import pageUtil from '../../utils/page-util.js'
const customer = require('../../api/customer.js')
const app = getApp();

var insureInfoDetail = app.globalData.insureInfoDetail;//销售计划信息
var buyInfo = app.globalData.buyInfo;//购买信息
var orderInfo = app.globalData.orderInfo;//订单信息
var insuredInfo = app.globalData.insuredInfo;//被保人信息
var underwritingFlag = false;//核保标志
var customerInfo = null;
Page({

  /**
   * 页面的初始数据
   */
  data: {
    userInfo: {},
    hasUserInfo: false,

    //投保人姓名
    appntName: "",

    //投保人姓名是否可以更改
    appntNameDisable:true,

    //错误提示
    tipErrShow: true,

    //初始化与被保人关系
    relationToAppnt: [],
  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    //获取用户信息
    customer.getCustomInfo({
      isUserId:1,
      idAuthState:1
    }).then((data) =>{
      console.log(data);
      customerInfo = data;

      //初始化投保人信息
      this.initAppntInfo();

      //初始化被保人信息
       this.initInsuredInfo();

      //初始化受益人信息
      this.initBnfInfo();

      //初始化抵扣信息
      this.initPointsDeduction();

      // //标的信息
      // this.initTargetInfo();

      // //初始化底部保费信息
      // this.initFooterInfo();

    })
  },

  /**
    * 生命周期函数--监听页面初次渲染完成
    */
  onReady: function () {
    pageUtil.checkLogin.then((data) => {
      console.log(data.isLogin)
      if (!data.isLogin) {
        console.log("没有登录！！！");
        wx.navigateTo({
          url: '../memberHome/memberHome',
        })
      }
    })
  },

  //初始化投保人信息
  initAppntInfo:function(){
    /*
    * 1.如果customerInfo有姓名+身份证号，+身份证号使用customerInfo的姓名；不可修改
    * 2.如果customerInfo没有姓名+身份证号，使用投保录入信息中投保人信息的姓名+身份证号；可以修改
    * 当2的情况下身份证号变更了，判断页面选择的关系
    * 如果没选择，不去计算保费
    * 如果选择的是本人+customerInfo没有姓名+身份证号，使用投保人的身份证号调用保费计算方法
    * 如果选择的是其他，不去计算保费
    */
    var userName = customerInfo.realName;
    // var userName = "吴杰";

    var idNo = customerInfo.idnoStar;
    // var idNo = "62262819920310235X";

    var mobile = customerInfo.mobileStar;
    // var mobile = "13516287185";

    if(userName != "" && userName){
        this.setData({
          appntNameDisable: true,
          appntName: userName
        })
        insuredInfo.insuredName = userName;
    }else{
      this.setData({
        appntNameDisable: false,
      })
    }

    if(idNo != "" && idNo){

      this.setData({
        appntIdDisable: true,
        appntId: idNo
      })
      insuredInfo.idNo = idNo;

    }else{

      this.setData({
        appntIdDisable:false,
      })

    }

    if (mobile != "" && mobile){

      this.setData({
        appntPhoneNumDisable: true,
        appentPhoneNumber: mobile
      })

      insuredInfo.mobile = mobile;
    }else{

      this.setData({
        appntPhoneNumDisable: false
      })

    }
  }, 
  
  //录入投保人姓名
  getAppntName:function(e){
    var that = this;
    var appntName = e.detail.value
    if (appntName == "") {
      underwritingFlag = false;//核保标志      
      this.setData({
        tipErrShow: false
      })
      this.setData({
        tipErrText: "请输入投保人姓名"
      })
      setTimeout(function () {
        that.setData({
          tipErrShow: true
        })
      }, 5000)
    } else {
      underwritingFlag = true;
      insuredInfo.insuredName = appntName;
      this.setData({
        tipErrShow: true
      })
    }
  },

  //录入投保人身份证号
  getAppntId:function(e){
    var that = this;
    var appenId = e.detail.value;
    var userIdLength = appenId.length;
    var result = that.isCardNo(appenId);
    if (!result) {
      underwritingFlag = false;
      this.setData({
        tipErrShow: false
      })
      this.setData({
        tipErrText: "请输入正确的身份证号"
      })
      setTimeout(function () {
        that.setData({
          tipErrShow: true
        })
      }, 5000)
    } else {
      var year = that.substring(appenId, 6, 10);
      console.log(year);
      var month = that.substring(appenId, 10, 12);
      var day = that.substring(appenId, 12, 14);
      var appentSex = appenId.substr(16, 1) % 2 == 0 ? 2 : 1;
      console.log(year + "年" + month + "月" + day + "日" + appentSex +"性别");
      var userBirthday = year + "-" + month + "-" + day;
      console.log("用户出生日期为:" + userBirthday);
      insuredInfo.birthday = userBirthday;
      this.setData({
        tipErrShow: true,
      })
      insuredInfo.insuredIdNo = appenId;
      insuredInfo.insureSex = appentSex;
    }
  },

  //录入投保人手机号
  getAppntPhoneNum:function(e){
    var that = this;
    var appentPhoneNum = e.detail.value;
    console.log(appentPhoneNum);
    var sMobile = this.checkMobile(appentPhoneNum);
    if (!sMobile) {
      underwritingFlag = false
      this.setData({
        tipErrShow: false
      })
      this.setData({
        tipErrText: "请输入正确的手机号"
      })
      setTimeout(function () {
        that.setData({
          tipErrShow: true
        })
      }, 5000);
    } else {
      underwritingFlag = true;
      this.setData({
        tipErrShow: true
      })
      insuredInfo.mobile = appentPhoneNum;
    }
  },
  
  //初始化被保人信息
  initInsuredInfo:function(){
    var that = this;
    /*
    * 1.如果关系只支持本人，不展示被保人姓名+证件号
    * 2.如果关系不只支持本人，展示关系选择选项,当选择关系为其他时，展示被保人姓名+证件号录入项
    * 触发：
    * 当被保人身份证号变更了，去计算保费
    * 当关系变更了，判断关系
    * 如果是本人，使用投保人的身份证号调用保费计算方法
    * 如果是其他，使用被保人的身份证号调用保费计算方法
    */
    wx.getStorage({
      key: 'insureInfoDetail',
      success: function(res) {
            insureInfoDetail = res.data;
        if (insureInfoDetail.insuredType == "1") { // 仅支持本人
          that.setData({
            insuredDisable: true
          })
        } else if (insureInfoDetail.insuredType == "2") {
          var arr = [];

          if (insureInfoDetail.relationToAppnt.length == 1) {
            
            arr.push(insureInfoDetail.relationToAppnt[0].text);

            if (insureInfoDetail.relationToAppnt[0].value == "00") {

              that.setData({
                relationToAppnt: arr,
                insuredDisable:true
              })

            } else {
              that.setData({
                relationToAppnt: arr,
                insuredDisable: false
              })
            }
          }else{
        
            for (var i = 0; i < insureInfoDetail.relationToAppnt.length;i++){
                arr.push(insureInfoDetail.relationToAppnt[i].text);
            }

            that.setData({
              relationToAppnt:arr,
              insuredDisable:false
            }) 

          }
           
        }
      },
    })
  },

  //录入被保人姓名
  getRecognizeeName: function (e) {
    var that = this;
    var recognizeeName = e.detail.value
    if (recognizeeName == "") {
      underwritingFlag = false;//核保标志      
      this.setData({
        tipErrShow: false
      })
      this.setData({
        tipErrText: "请输入被保人姓名"
      })
      setTimeout(function () {
        that.setData({
          tipErrShow: true
        })
      }, 5000)
    } else {
      underwritingFlag = true;
      insuredInfo.recognizeeName = recognizeeName;
      this.setData({
        tipErrShow: true
      })
    }
  }, 

  //录入被保人ID
  getRecognizeeId:function(e){
    var that = this;
    var recognizeeId = e.detail.value;
    var userIdLength = recognizeeId.length;
    var result = that.isCardNo(recognizeeId);
    if (!result) {
      underwritingFlag = false;
      this.setData({
        tipErrShow: false
      })
      this.setData({
        tipErrText: "请输入正确的身份证号"
      })
      setTimeout(function () {
        that.setData({
          tipErrShow: true
        })
      }, 5000)
    } else {
      var year = that.substring(recognizeeId, 6, 10);
      console.log(year);
      var month = that.substring(recognizeeId, 10, 12);
      var day = that.substring(recognizeeId, 12, 14);
      var recognizeeSex = recognizeeId.substr(16, 1) % 2 == 0 ? 2 : 1;
      console.log(year + "年" + month + "月" + day + "日" + recognizeeSex + "性别");
      var userBirthday = year + "-" + month + "-" + day;
      console.log("用户出生日期为:" + userBirthday);
      buyInfo.birthday = userBirthday;
      this.setData({
        tipErrShow: true,
      })
      insuredInfo.recognizeeIdNo = recognizeeId;
      insuredInfo.recognizeeSex = recognizeeSex;
    }
  },

  //初始化受益人信息
  initBnfInfo:function(){
    var that = this;
    wx.getStorage({
      key: 'insureInfoDetail',
      success: function(res) {
        var insureInfoDetail = res.data;
        that.setData({
          bnfName: insureInfoDetail.bnfType.text,
          bnfType: insureInfoDetail.bnfType.value
        }) 
      },
    })
  },

   //初始化积分抵扣 
  initPointsDeduction:function(){

    if (buyInfo.isPoint) {

      this.setData({
        price: parseFloat(buyInfo.payMoney).toFixed(2)
      });
      buyInfo.isOpen = true;

    } else {

      this.setData({
        price: parseFloat(orderInfo.orderAmount).toFixed(2)
      });
      buyInfo.isOpen = false;
    } 

  },

  //初始化标的信息
  initTargetInfo:function(){
    
  },

  //被保人关系信息改变
  bindPickerChange: function (e) {
    console.log('picker发送选择改变，携带值为', e.detail.value);
    this.setData({
      index: e.detail.value
    })
    var relationAppnt = e.detail.value;
    //  this.changeRelation(e.detail.value);
    customerInfo.relationAppn = relationAppnt; 

  },

  //重置保障计划  
  calInsurePlan:function(){

    if (customerInfo.relationAppn == 0) {//是否是本人投保
      //生日
      var birthDate = insuredInfo.birthday;

      // 年龄
      var age = getAge(birthDate);

      // 性别
      var sex = insuredInfo.insureSex;
    }else{
      //生日
      var birthDate = buyInfo.birthday;

      // 年龄
      var age = getAge(birthDate);

      // 性别
      var sex = insuredInfo.recognizeeSex;
    }
    console.log("性别" + sex);
    console.log("年龄" + age);
    console.log("产品编码" + orderInfo.productCode);
    console.log("生效日期" + orderInfo.cvalidDate);
    console.log("保险期间" + orderInfo.insurePeriod);
    console.log("保险期间单位" + orderInfo.insurePeriodType);
    console.log("缴费期间" + orderInfo.payInterval);
    console.log("缴费期间单位" + orderInfo.payIntervalType);
    console.log("校验年龄范围结果:" + checkInsurdBirth(birthDate));
    if (checkInsurdBirth(birthDate)) {//计算保费
      var result = "";
      var price = calPrem(orderInfo.productName, orderInfo.insurePeriod, orderInfo.insurePeriodType, age, sex, orderInfo.payInterval, orderInfo.payIntervalType);

      if(price==""){
        this.setData({
          price:orderInfo.orderAmount
        })
      } else if (price=="--"){
        orderInfo.orderAmount = price;
        buyInfo.orderAmount = orderInfo.orderAmount;
        this.setData({
          price: orderInfo.orderAmount
        })
        result = "当前客户信息不支持投保";
      }else{
        price = price * orderInfo.mult;
        orderInfo.orderAmount = parseFloat(price).toFixed(2);
        buyInfo.orderAmount = orderInfo.orderAmount;
        this.setData({
          price: orderInfo.orderAmount
        })
      }
      
      if (buyInfo.isPoint) {
        this.calPoint();
      }

      if (result == "") {
        setShowInfo(relation, sex, birthDate);
      }
      return result;
    }else{
      return "请确认被保险人年龄在可保范围内";
    }
  },

  //根据出生年月与保单生效日计算年龄
  getAge: function (birthDate){
    if (birthDate != undefined) {
        wx.getStorage({
          key: 'insureInfoDetail',
          success: function(res) {
            insureInfoDetail = res.data;
            var insuredAgeType = insureInfoDetail.insuredAgeType; // 指定日期生效
            if (insuredAgeType == "0") {
              var cvalidate = orderInfo.cvalidDate; // yyyy-mm-dd;
            }else{
              // 格式化生效时间
              var currDate = new Date(new Date().getTime());
              var month = currDate.getMonth() < 9 ? ('0' + (currDate.getMonth() + 1)) : (currDate.getMonth() + 1);
              var day = currDate.getDate() < 10 ? ('0' + currDate.getDate()) : currDate.getDate();
              cvalidate = currDate.getFullYear() + "-" + month + "-" + day;
            }

            // 生效日期
            var cvalidateArry = cvalidate.split("-");
            var cvalidateYear = cvalidateArry[0];
            var cvalidateMonth = cvalidateArry[1];
            var cvalidateDay = cvalidateArry[2];
            console.log("cvalidateYear: " + cvalidateYear);
            console.log("cvalidateMonth: " + cvalidateMonth);
            console.log("cvalidateDay: " + cvalidateDay);

            // 出生日期
            var birthDateArry = birthDate.split("-");
            var birthDateYear = birthDateArry[0];
            var birthDateMonth = birthDateArry[1];
            var birthDateDay = birthDateArry[2];
            console.log("birthDateYear: " + birthDateYear);
            console.log("birthDateMonth: " + birthDateMonth);
            console.log("birthDateDay: " + birthDateDay);

            console.log((parseInt(cvalidateYear) == parseInt(birthDateYear) + 1) &&
            (parseInt(cvalidateMonth) < parseInt(birthDateMonth)));
            console.log((parseInt(cvalidateYear) == parseInt(birthDateYear) + 1) &&
            (parseInt(cvalidateMonth) == parseInt(birthDateMonth)) &&
            (parseInt(cvalidateDay) <= parseInt(birthDateDay)));

            oDate1 = new Date(cvalidateYear, cvalidateMonth - 1, cvalidateDay, 0, 0, 0);
            console.log("oDate1: " + oDate1);
            oDate2 = new Date(birthDateYear, birthDateMonth - 1, birthDateDay, 0, 0, 0);
            console.log("oDate2: " + oDate2);
            returnAge = parseInt(Math.abs(oDate1 - oDate2) / 1000 / 60 / 60 / 24); //把相差的毫秒数转换为天数
            console.log("returnAge: " + returnAge + "D");

             // 计算年龄
            if (cvalidateYear == birthDateYear ||
              ((parseInt(cvalidateYear) == parseInt(birthDateYear) + 1) && (parseInt(cvalidateMonth) < parseInt(birthDateMonth))) ||
              ((parseInt(cvalidateYear) == parseInt(birthDateYear) + 1) && (parseInt(cvalidateMonth) == parseInt(birthDateMonth)) && (parseInt(cvalidateDay) <= parseInt(birthDateDay)))) {
              oDate1 = new Date(cvalidateYear, cvalidateMonth - 1, cvalidateDay, 0, 0, 0);
              console.log("oDate1: " + oDate1);
              oDate2 = new Date(birthDateYear, birthDateMonth - 1, birthDateDay, 0, 0, 0);
              console.log("oDate2: " + oDate2);
              returnAge = parseInt(Math.abs(oDate1 - oDate2) / 1000 / 60 / 60 / 24); //把相差的毫秒数转换为天数
              console.log("returnAge: " + returnAge);
              returnAge += 'D';   // 计算出生了多少天
            } else {
              var ageDiff = cvalidateYear - birthDateYear; //年之差
              if (ageDiff > 0) {
                if (cvalidateMonth == birthDateMonth) {
                  var dayDiff = cvalidateDay - birthDateDay;//日之差
                  if (dayDiff < 0) {
                    returnAge = ageDiff - 1;
                  } else {
                    returnAge = ageDiff;
                  }
                } else {
                  var monthDiff = cvalidateMonth - birthDateMonth;//月之差
                  if (monthDiff < 0) {
                    returnAge = ageDiff - 1;
                  } else {
                    returnAge = ageDiff;
                  }
                }
                returnAge += 'Y';
              } else {
                returnAge = -1;//返回-1 表示出生日期输入错误 晚于今天
              }
            }
            return returnAge;//返回周岁年龄   
          }
        })
    }else{
      return "";
    }
  }, 

  //积分抵扣计算方法
  calPoint:function(){

    var minPoint = buyInfo.minPoint;
    var minPrice = buyInfo.minPrice;
    var rate = buyInfo.rate;
    var maxPrice = buyInfo.maxPrice;

    var exchangeIntegral;
    var exchangeMoney;
    var payMoney;
    var orderAmount = orderInfo.orderAmount;

    if (orderAmount == '-1') {
      wx.showModal({
        title: '提示',
        content: '保费满' + minPrice + '元可用',
        success: function (res) {
          if (res.confirm) {
            console.log('用户点击确定')
          } else if (res.cancel) {
            console.log('用户点击取消')
          }
        }
      })
    } else if (orderAmount != '') {
      if (orderAmount < minPrice) {
        console.log('成单金额' + orderAmount + '，最小金额' + minPrice);
        buyInfo.payMoney = orderInfo.orderAmount;
        wx.showModal({
          title: '提示',
          content: '保费满' + minPrice + '元可用',
          success: function (res) {
            if (res.confirm) {
              console.log('用户点击确定')
            } else if (res.cancel) {
              console.log('用户点击取消')
            }
          }
        })
        return;
      }

      //计算最高可抵扣金额exchangeMoney，兑换可用积分exchangeIntegral
      var point = availablePoint > minPoint ? availablePoint : minPoint;
      //var availablePrice = parseInt(point/100);
      var availablePrice = point / 100;

      var ratePrice = null;
      if (rate != '' && rate != null) {
        ratePrice = parseFloat(rate * orderAmount).toFixed(2);
      } else {
        ratePrice = orderAmount;
      }
      if (availablePoint >= minPoint) {
        if (maxPrice == '' || maxPrice == null) {//两值比较取小
          exchangeMoney = availablePrice < ratePrice ? availablePrice : ratePrice;
        } else {//三值比较取小
          exchangeMoney = availablePrice - (ratePrice - maxPrice < 0 ? ratePrice : maxPrice) < 0 ? availablePrice : (ratePrice - maxPrice < 0 ? ratePrice : maxPrice);
        }
      } else {//积分不满足条件时，exchangeMoney计算不同
        if (maxPrice == '' || maxPrice == null) {//两值比较取小
          exchangeMoney = ratePrice;
        } else {//三值比较取小
          exchangeMoney = ratePrice - maxPrice < 0 ? ratePrice : maxPrice;
        }
      }
      exchangeIntegral = parseFloat(exchangeMoney * 100).toFixed(0);
      console.log(exchangeIntegral, availablePrice, ratePrice, maxPrice, rate);
      if (availablePoint < minPoint) {
        buyInfo.payMoney = orderInfo.orderAmount;
        wx.showModal({
          title: '提示',
          content: '共' + availablePoint + '积分，满' + minPoint + '积分可用',
          success: function (res) {
            if (res.confirm) {
              console.log('用户点击确定')
            } else if (res.cancel) {
              console.log('用户点击取消')
            }
          }
        })
      }else{
        var availablePointStr = availablePoint >= 100000 ? (availablePoint / 10000) + '万' : availablePoint;
        payMoney = orderAmount - exchangeMoney;
        this.setData({
          price: parseFloat(payMoney).toFixed(2)
        })
        buyInfo.payMoney = payMoney;
        console.log('满足条件初始化，payMoney' + payMoney + 'orderAmount' + orderAmount + "exchangeMoney" + exchangeMoney);
        if (buyInfo.isOpen) {
          payMoney = buyInfo.payMoney;
          console.log("session,payMoney" + payMoney);
          this.setData({
            price: parseFloat(payMoney).toFixed(2)
          })
        }else{
          console.log("session,orderAmount" + orderAmount);
         this.setData({
           price: parseFloat(orderAmount).toFixed(2)
         })
        }
      }
    }
  },

  //计算保费 
  calPrem: function (planName, period, insurePeriodUnit, age, sex, payInterval, payIntervalType) {
    console.log("开始计算保费");
    var that = this
    console.log("计划名：" + planName + "，保险期间：" + period + "，保险期间单位：" + insurePeriodUnit + "，年龄：" + age + "，性别：" + sex + "，缴费期间：" + payInterval + "，缴费期间单位：" + payIntervalType);

    // 格式化性别
    if (sex == '0') {
      sex = '男';
    } else if (sex == '1') {
      sex = '女';
    } else if (sex == '2') {
      sex = '不详';
    }

    // 格式化保险期间
    if (insurePeriodUnit == "M") {
      period = period + "月";
      console.log(period)
    } else if (insurePeriodUnit == "D") {
      period = period + "天";
      console.log(period)
    } else if (insurePeriodUnit == "Y") {
      period = period + "年";
      console.log(period)
    } else if (insurePeriodUnit == "A") {
      period = period + "岁";
      console.log(period)
    }

    // 格式化缴费期间
    if (payIntervalType == "Y") {
      payInterval = payInterval + "年";
    } else if (payIntervalType == "M") {
      payInterval = payInterval + "月";
    }

    // 保费试算
    wx.getStorage({
      key: 'insureInfoDetail',
      success: function(res) {
        var propertyMapperExcel = res.data.propertyMapperExcel;
        if (saleMapper != undefined && saleMapper != "") {
          var amt = ""; // 保费
          console.log("保费999" + amt)
          console.log(saleMapper.length)
          for (var i = 0; i < saleMapper.length; i++) {
            console.log(saleMapper[i].protectPlan)
            if (planName == undefined || saleMapper[i].protectPlan == '' || saleMapper[i].protectPlan == planName) {   // 产品编码是计算保费的一个标识  所以不能为空
              console.log("产品编码" + saleMapper[i].protectPlan)
              if (sex == undefined || saleMapper[i].sex == '' || saleMapper[i].sex == sex) {
                if (payInterval == undefined || saleMapper[i].chargePeriod == '' || saleMapper[i].chargePeriod == payInterval) {
                  if (payInterval == undefined || saleMapper[i].chargePeriod == '' || saleMapper[i].chargePeriod == payInterval) {
                    if (period == undefined || saleMapper[i].insurePeriod == '' || saleMapper[i].insurePeriod == period) {
                      if (period == saleMapper[i].insurePeriod) {
                        // value含有key=age  属性，同时这个值不为空时，进行年龄范围的筛选
                        if (period == saleMapper[i].insurePeriod) {
                          var k = i;
                          if (saleMapper[k].insuredAge && saleMapper[i].insuredAge != "" && saleMapper[k].insuredAge != "-") {
                            var checkMin = "";
                            var checkMax = "";
                            var ageUnit = age.substring(age.length - 1); // 获取用户年龄单位 D/Y
                            console.log(ageUnit)
                            var ageVal = age.substring(0, age.length - 1); // 获取用户年龄
                            console.log(ageVal)
                            // var ageMapper = value['insuredAge'];  // 获取配置中的年龄范围
                            var ageMapper = saleMapper[k].insuredAge
                            var ageMapperArry = ageMapper.split("-"); //eg: [60D,17Y]
                            console.log(ageMapperArry)
                            // 18Y的情况
                            if (ageMapperArry.length == 1) {
                              var beginUnit = ageMapperArry[0].toString().substring(ageMapperArry[0].length - 1);  // 获取单位 eg:Y
                              var beginVal = ageMapperArry[0].toString().substring(0, ageMapperArry[0].length - 1);  // 获取单位 eg:60
                              console.log(beginUnit)
                              console.log(beginVal)
                              if (beginUnit == "天") {
                                beginUnit = "D";
                              } else if (beginUnit == "年") {
                                beginUnit = "Y";
                              }
                              if (ageUnit == beginUnit && parseInt(ageVal) == parseInt(beginVal)) {       // 单位相同
                                checkMin = true;
                                checkMax = true;
                              } else {             // 单位不同
                                checkMin = false;
                                checkMax = false;
                              }
                            } else { //18Y-65Y的情况    
                              for (var j = 0; j < ageMapperArry.length; j++) {
                                var beginUnit = ageMapperArry[j].toString().substring(ageMapperArry.length);  // 获取单位 eg:60
                                var beginVal = ageMapperArry[j].toString().substring(0, ageMapperArry.length);  // 获取单位 eg: D
                                if (j == 0) {
                                  if (beginUnit == "天") {
                                    beginUnit = "D";
                                  } else if (beginUnit == "年") {
                                    beginUnit = "Y";
                                  }

                                  console.log(ageUnit + "+" + beginUnit)
                                  if (ageUnit == beginUnit) { // 单位相同
                                    if (parseInt(ageVal) >= parseInt(beginVal)) {
                                      checkMin = true;
                                    } else {
                                      checkMin = false;
                                    }
                                  } else { // 单位不同               
                                    if (ageUnit == 'D' && beginUnit == 'Y') {
                                      checkMin = false;
                                    } else if (ageUnit == 'Y' && beginUnit == 'D') {
                                      checkMin = true;
                                    }
                                  }
                                }
                                if (j == 1) {
                                  var endUnit = ageMapperArry[j].toString().substring(ageMapperArry.length);  // 获取单位
                                  var endVal = ageMapperArry[j].toString().substring(0, ageMapperArry.length);  // 获取单位  eg: D/Y                          
                                  console.log(endUnit + "单位" + endVal)
                                  if (endUnit == "天") {
                                    endUnit = "D";
                                  } else if (endUnit == "年") {
                                    endUnit = "Y";
                                  }
                                  if (ageUnit == endUnit) {
                                    if (parseInt(ageVal) <= parseInt(endVal)) {
                                      checkMax = true;
                                    } else {
                                      checkMax = false;
                                    }
                                  } else {
                                    if (ageUnit == 'D' && endUnit == 'Y') {
                                      checkMax = true;
                                    } else if (ageUnit == 'Y' && endUnit == 'D') {
                                      checkMax = false;
                                    }
                                  }
                                }
                              }
                            }
                          }
                          if (checkMax && checkMin) { // 最终出生日期也正确了  则开始计算保费
                            console.log(saleMapper[k])
                            wx.getStorage({
                              key: 'fewNum',
                              success: function (res) {
                                var mult = res.data;
                                console.log(mult)
                                if (parseInt(saleMapper[k].mult) < parseInt(mult)) {
                                  that.setData({
                                    fewNum: mult
                                  })
                                  // isAllow(parseInt(saleMapper[k].mult));
                                  if (saleMapper[k].amt == undefined || saleMapper[k].amt == "") {
                                    amt = "--";
                                    that.setData({
                                      price: amt
                                    })
                                  } else {
                                    amt = saleMapper[k].amt;
                                    that.setData({
                                      price: amt * mult
                                    })
                                  }
                                } else if (parseInt(saleMapper[k].mult) > parseInt(mult)) {
                                  that.setData({
                                    fewNum: saleMapper[k].mult
                                  })

                                  if (saleMapper[k].amt == undefined || saleMapper[k].amt == "") {
                                    amt = "--";
                                    that.setData({
                                      price: amt
                                    })
                                  } else {
                                    amt = saleMapper[k].amt;
                                    that.setData({
                                      price: amt * mult
                                    })
                                  }
                                } else {
                                  amt = saleMapper[k].amt
                                  that.setData({
                                    price: amt
                                  })
                                  buyInfo.price = amt
                                }
                                //isAllow(parseInt(saleMapper[k].mult));   
                              }
                            })
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return amt;
          buyInfo.price = amt
          console.log("保费" + amt)
        } else {
          return ""
        }
      }
    })
  },


  // 立即投保
  insureBTN: function (options) {
    console.log(insuredInfo.insuredIdNo + "：投保人手机号");
    console.log(insuredInfo.insuredName + "：投保人姓名");
    console.log(insuredInfo.mobile+"投保人手机号");
    console.log(underwritingFlag);
    if (buyInfo.recognizeeName && buyInfo.recognizeeName != "" || buyInfo.birthday && buyInfo.birthday != "") {
    }
    console.log(orderInfo);
    console.log(insuredInfo)
    hrp.underwriting({
      orderInfo: orderInfo,
      insuredInfo: insuredInfo
    }).then((data) => {
      console.log(data);
    })
  },

  //用户身份证验证
  isCardNo:function (card){  
    // 身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X  
    var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/; 
    console.log(reg.test(card)) 
    if(reg.test(card) === false) {
      return false;
    }else{
      return true;
    }
  },

  //用户手机号验证
  checkMobile: function (sMobile){ 
    if (!(/^1[34578]\d{9}$/.test(sMobile))){ 
      return false;
    }else{
      return true;
    } 
  }, 

  //截取用户身份证出生日期
  substring:function(str,n,m){
    var res=str.substring(n,m);
    return res;
  },

  // 校验年龄范围
  checkInsurdBirth:function (birthday){
    if(new Date(buyInfo.insuredEndDate).getTime() >= new Date(birthday).getTime() && new Date(birthday).getTime() >= new Date(buyInfo.insuredBeginDate).getTime()) {
        return true;
    } else {
             //$.alertMessage("请确认被保险人年龄在可保范围内");
        this.setData({
          tipErrText:"请确认被保险人年龄在可保范围内"
        })  
        return false;
    }
  },
  
})