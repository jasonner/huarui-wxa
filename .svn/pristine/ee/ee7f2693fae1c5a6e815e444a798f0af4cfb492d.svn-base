const hrp = require('../../api/hrp.js');
const customer = require('../../api/customer.js');
import http from '../../utils/http.js';
const app = getApp();
// var productDetailInfo = app.globalData.productDetailInfo;
var buyInfo = app.globalData.buyInfo;//购买信息
var buyInfoTemp = {};
var orderInfo = app.globalData.orderInfo;//订单信息
var insuredInfo = app.globalData.insuredInfo;//被保人信息
var insuredInfoTemp = {};
var selfRelationFlag = app.globalData.selfRelationFlag//是否只支持本人购买
var isLogin = app.globalData.isLogin;//登录标志
//产品详情信息
var productDetailInfo = null;
var customerInfo = null;
Page({
  /**
   * 页面的初始数据
   */
  data: {
    //banner图片数据
    bannerInfo: {},

    //产品优势
    productAdvantageInfo: {},
    //产品优势详细信息，默认没有
    productAdvantageInfoDetail: false,

    //保障计划
    safeguardPlansInfo:{},
    //保障计划tab是否展示，默认不展示
    safeguardPlansInfoShow: false,
    //保障详情
    planDesc:[],
    //保障详情详细信息，默认没有
    safeguardPlansDetailShow: false,
    //当前选择产品编码
    currentProductCode: "",

    //是否展示份数，默认不展示
    multShow: false,
    //最大份数
    maxMult: 1,
    //当前份数
    mult: 1,
    //份数是否可更改，默认可修改
    multDisabled: false,

    //保险期间是否展示，默认不展示
    insurePeriodShow: false,
    //保障期间范围数据
    insurePeriod: [],
    //保障期间是否可选，默认可选
    insurePeriodDisabled: false,
    //选中的保险期间index
    insurePeriodIndex: 0,
    //保障期间默认展示
    insurePeriodDefault: "",
    
    //交费方式是否显示
    chargeTypeShow: false,
    //交费方式文本
    chargeTypeLabel: "",

    //缴费期间是否显示，默认不展示
    chargePeriodShow: false,
    //缴费期间数据
    chargePeriod: [],
    //缴费期间显示初始化
    chargePeriodDefault: "",
    //缴费期间是否可选，默认可选
    chargePeriodDisabled: false,
    //选中的交费期间index
    chargePeriodIndex: 0,

    //生效日期类型
    // cvalidDateType: "",
    //默认选中的生效日期
    // cvalidateDefault: "",
    //生效日期是否可选，默认可选
    cvalidateDisabled: false,

    //销售状态 
    saleStatus: false,

    //性别是否展示，默认不展示
    sexShow: false,
    //性别数据
    sexSelect: ["男","女"], 
    //是否可变更性别，默认可选
    sexDisable: false,
    //性别选择index
    sexIndex: 0,

    //被保人出生日期是否展示，默认不展示
    birthdayShow: false,
    //被保人出生日期是否可选，默认可选
    birthdayDisabled: false,
    //被保人生日出生日期默认选择值
    // birthdayDefault: "",

    //遮罩层
    modelShow: true,

    //条款弹层 
    clauseShow: true,

    //保费
    price: 0,
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    var that = this;
    console.log(options);
    orderInfo.itemCode = options.itemCode;

    if(isLogin){
      customer.getCustomInfo({}).then((data) => {
        customerInfo = data;
      })
    }

    hrp.productInfo({//请求产品数据
      itemCode: options.itemCode
    }).then((data) => {
      console.log(data);
      productDetailInfo = data;
      //初始化banner图渲染
      this.initBannerInfo();

      //初始化产品优势渲染
      this.initProductAdvantageInfo();

      //初始化销售状态
      this.initSaleStatus();

      //初始化保障计划标签
      this.initPlanTab();

      //初始化份数渲染
      this.initMult();

      //初始化保障期间渲染
      this.initInsurePeroid();

      //初始化交费方式渲染
      this.initChargeType();

      //初始化缴费期间渲染
      this.initChargePeroid();

      //初始化生效日期渲染
      // this.initCvalidate();

      //初始化被保人性别渲染
      this.initSex();

      //初始化被保人出生日期
      this.initBirthday();

      //初始化积分抵扣渲染
      this.initPointsDeduction(data);

    })
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {
  },

  //初始化banner图渲染
  initBannerInfo: function (){
    console.log(productDetailInfo);
    this.setData({
      bannerInfo: {
          'productName': productDetailInfo.productName,
          "productImageUrl": productDetailInfo.bannerInfo.productImageUrl,
          'organizationName': productDetailInfo.bannerInfo.organizationName,
          'salesMult': productDetailInfo.bannerInfo.salesMult
        }
    })
  },

  //初始化产品优势渲染
  initProductAdvantageInfo: function (){
    this.setData({
      productAdvantageInfo: productDetailInfo.productAdvantageInfo
    })

    //查看更多特色链接
    if (productDetailInfo.productAdvantageInfo.detailCode){
      this.setData({
        productAdvantageInfoDetail: true
      })
    }
  },

  //初始化销售状态
  initSaleStatus: function () {
    // TODO
  },

  //初始化保障计划标签
  initPlanTab: function (){
    this.setData({
      safeguardPlansInfo: productDetailInfo.safeguardPlansInfo
    });

    //有多个保障计划，展示TAB
    if (productDetailInfo.safeguardPlansInfo.length > 1) {
      this.setData({
        safeguardPlansInfoShow: true,
      })
    }

    //有保障计划，默认使用第一个保障计划的保障详情描述
    if (productDetailInfo.safeguardPlansInfo.length >= 1) {
      //保障详情多行多列
      this.setData({
        planDesc: productDetailInfo.safeguardPlansInfo[0].planDesc
      })
      //查看保障详情链接
      if (productDetailInfo.safeguardPlansInfo[0].planDesc) {
        this.setData({
          safeguardPlansDetailShow: true
        })
      }
    }

    //从缓存中获取已选择的TAB
    // orderInfo.productCode = "2257"; //为了测试
    if (orderInfo.productCode) {
      console.log("当前已选择产品： " + orderInfo.productCode);
      for (var i = 0; i < productDetailInfo.safeguardPlansInfo.length; i++) {
        if (productDetailInfo.safeguardPlansInfo[i].productCode == orderInfo.productCode) {
          //将已选择的产品赋值给页面
          this.setData({
            planDesc: productDetailInfo.safeguardPlansInfo[i].planDesc,
            currentProductCode: productDetailInfo.safeguardPlansInfo[i].productCode
          })

          //查看保障详情链接
          if (productDetailInfo.safeguardPlansInfo[i].planDesc) {
            this.setData({
              safeguardPlansDetailShow: true
            })
          }

          //重置当前计划对应生效日期
          this.changeCvalidate(i);
        }
      }
    }else{
      //缓存中没有已选择的TAB
      //默认使用外面的产品编码
      this.setData({
        currentProductCode: productDetailInfo.productCode
      })
      orderInfo.productCode = productDetailInfo.productCode;

      //有多个保障计划，默认选中第一个TAB
      if (productDetailInfo.safeguardPlansInfo.length >= 1) {
        //判断是否有产品编码
        if (productDetailInfo.safeguardPlansInfo[0].productCode) {
          this.setData({
            currentProductCode: productDetailInfo.safeguardPlansInfo[0].productCode
          })
          orderInfo.productCode = productDetailInfo.safeguardPlansInfo[0].productCode;
          orderInfo.productName = productDetailInfo.safeguardPlansInfo[0].planName;
        }
      }

      //重置当前计划对应生效日期
      this.changeCvalidate(0);
    }
  },

  //切换保障计划tab
  insurePlanChange: function(e){
    console.log("选择保障计划");
    var _datasetId = e.target.dataset.id; //data-id
    var _datasetIndex = e.currentTarget.dataset.index; //data-index
    console.log(_datasetId);
    console.log(_datasetIndex);

    //切换完保障计划后判断是否还有查询保障详情链接
    if (productDetailInfo.safeguardPlansInfo[_datasetIndex].planDesc) {
      this.setData({
        safeguardPlansDetailShow: true
      })
    } else {
      this.setData({
        safeguardPlansDetailShow: false
      })
    }  

    console.log("选择保障计划对应产品编码：" + productDetailInfo.safeguardPlansInfo[_datasetIndex].productCode);
    console.log("选择保障计划名称：" + productDetailInfo.safeguardPlansInfo[_datasetIndex].planName);
    this.setData({
      currentProductCode: productDetailInfo.safeguardPlansInfo[_datasetIndex].productCode,
      planDesc: productDetailInfo.safeguardPlansInfo[_datasetIndex].planDesc
    })

    //在变更时覆盖orderInfo
    orderInfo.productCode = productDetailInfo.safeguardPlansInfo[_datasetIndex].productCode;
    orderInfo.productName = productDetailInfo.safeguardPlansInfo[_datasetIndex].planName;

    //重置当前计划对应生效日期
    this.changeCvalidate(_datasetIndex);

    //TODO 计算保费
    //TODO 校验库存

  },

  //初始化份数渲染
  initMult: function (){
    //是否展示份数
    console.log("支持最大份数：" + productDetailInfo.insureInfo.maxMult);
    if (productDetailInfo.insureInfo.maxMult > 1) {
      this.setData({
        multShow: true,
        maxMult: productDetailInfo.insureInfo.maxMult,
        multDisabled: true
      })
    }

    //从缓存中获取已录入份数
    if (orderInfo.mult) {
      this.setData({
        mult: orderInfo.mult
      })
    }else{
      //默认初始化为1份
      orderInfo.mult = 1;
    }
  },

  //录入份数
  multChange: function(e){
    console.log("份数： " + e.detail.value);
    var currMult = e.detail.value;
    var maxMult = productDetailInfo.insureInfo.maxMult;

    // // 如果文本值为空/为非纯数字/文本值小于1,设置为1
    if (currMult == "" || isNaN(currMult) || currMult < 1) {
      currMult = '1';
    } else if (parseInt(currMult) > maxMult) {
      currMult = maxMult;
    }

    this.setData({
      mult: currMult
    })
    //设置到缓存中
    orderInfo.mult = currMult;

    //TODO 计算保费
    //TODO 校验库存
  },

  //初始化保障期间渲染
  initInsurePeroid: function (){
    // 初始化保险期间页面元素
    if (productDetailInfo.insureInfo.insurePeriod && 
          productDetailInfo.insureInfo.insurePeriod.length > 0) {

      //循环，组装label数组
      var arr = [];
      for (var i = 0; i < productDetailInfo.insureInfo.insurePeriod.length; i++) {
        arr.push(productDetailInfo.insureInfo.insurePeriod[i].showContent);
      }
      
      this.setData({
        insurePeriodShow: true,
        insurePeriod: arr,
        insurePeriodDefault: productDetailInfo.insureInfo.insurePeriod[0].showContent
      })

      if (productDetailInfo.insureInfo.insurePeriod.length == 1) {
        //只有一个保障期间时不可选
        this.setData({
          insurePeriodDisabled: true
        })
      }
    }

    //从缓存中读取已选择的保险期间
    if (orderInfo.insurePeriod) {
      for (var i = 0; i < productDetailInfo.insureInfo.insurePeriod.length; i++) {
        if (productDetailInfo.insureInfo.insurePeriod[i].insurePeriod == orderInfo.insurePeriod &&
          productDetailInfo.insureInfo.insurePeriod[i].insurePeriodUnit == orderInfo.insurePeriodType) {
          this.setData({
            insurePeriodDefault: productDetailInfo.insureInfo.insurePeriod[i].showContent
          })
        }
      }
    }else{
      //在初始化时设置orderInfo
      orderInfo.insurePeriod = productDetailInfo.safeguardPlansInfo[0].insurePeriod;
      orderInfo.insurePeriodType = productDetailInfo.safeguardPlansInfo[0].insurePeriodUnit;
    }
  },

  //变更保障期间
  insurePeriodChange: function(e){
    console.log("选择保障期间index：" + e.detail.value);
    var insurePeriodIndex = e.detail.value;

    this.setData({
      insurePeriodDefault: productDetailInfo.insureInfo.insurePeriod[insurePeriodIndex].showContent,
      insurePeriodIndex: insurePeriodIndex
    })

    //在变更时覆盖orderInfo
    console.log("选择保障期间：" + productDetailInfo.insureInfo.insurePeriod[insurePeriodIndex].insurePeriod);
    console.log("选择保障期间单位：" + productDetailInfo.insureInfo.insurePeriod[insurePeriodIndex].insurePeriodUnit);
    orderInfo.insurePeriod = productDetailInfo.insureInfo.insurePeriod[insurePeriodIndex].insurePeriod;
    orderInfo.insurePeriodType = productDetailInfo.insureInfo.insurePeriod[insurePeriodIndex].insurePeriodUnit;
    orderInfo.insurePeriodIndex = insurePeriodIndex; //应该没有用了

    //TODO 计算保费
  },

  //初始化交费方式渲染
  initChargeType: function (){
    if (productDetailInfo.insureInfo.chargeType){
      this.setData({
        chargeTypeShow: true,
        chargeTypeLabel: productDetailInfo.insureInfo.chargeType.label
      })
      
      //TODO 往缓存中设置？
    }
  },

  //初始化缴费期间渲染
  initChargePeroid: function (){
    // 初始化保险期间页面元素
    if (productDetailInfo.insureInfo.chargePeriod &&
      productDetailInfo.insureInfo.chargePeriod.length > 0) {

      //循环，组装label数组
      var arr = [];
      for (var i = 0; i < productDetailInfo.insureInfo.chargePeriod.length; i++) {
        console.log(productDetailInfo.insureInfo.chargePeriod[i].showChargeContent);
        arr.push(productDetailInfo.insureInfo.chargePeriod[i].showChargeContent);
      }

      this.setData({
        chargePeriodShow: true,
        chargePeriod: arr,
        chargePeriodDefault: productDetailInfo.insureInfo.chargePeriod[0].showChargeContent
      })

      if (productDetailInfo.insureInfo.chargePeriod.length == 1) {
        //只有一个交费期间不可选
        this.setData({
          chargePeriodDisabled: true
        })
      }
    }

    //从缓存中获取已选择交费期间
    if (orderInfo.payInterval) {
      $.each(productDetailInfo.insureInfo.chargePeriod, function (index, item) {
        if (item.ChargePeriod == orderInfo.payInterval &&
            item.ChargePeriodUnit == orderInfo.payIntervalType) {
          this.setData({
            chargePeriodDefault: productDetailInfo.insureInfo.chargePeriod[index].showContent
          })
        }
      })
    }else{
      //在初始化时设置orderInfo
      orderInfo.payInterval = productDetailInfo.safeguardPlansInfo[0].ChargePeriod;
      orderInfo.payIntervalType = productDetailInfo.safeguardPlansInfo[0].ChargePeriodUnit;
    }
  },

  //变更交费期间
  chargePeriodChange: function (e) {
    console.log("选择交费期间index：" + e.detail.value);
    var chargePeriodIndex = e.detail.value;

    this.setData({
      chargePeriodDefault: productDetailInfo.insureInfo.chargePeriod[chargePeriodIndex].showChargeContent,
      chargePeriodIndex: chargePeriodIndex
    })

    //在变更时覆盖orderInfo
    console.log("选择缴费期间：" + productDetailInfo.insureInfo.chargePeriod[chargePeriodIndex].ChargePeriod);
    console.log("选择缴费期间类型：" + productDetailInfo.insureInfo.chargePeriod[chargePeriodIndex].ChargePeriodUnit);
    orderInfo.payInterval = productDetailInfo.insureInfo.chargePeriod[chargePeriodIndex].ChargePeriod;
    orderInfo.payIntervalType = productDetailInfo.insureInfo.chargePeriod[chargePeriodIndex].ChargePeriodUnit;
    orderInfo.payIntervalIndex = chargePeriodIndex; //应该没有用了

    //TODO 计算保费
  },

  //初始化生效日期渲染
  // initCvalidate: function (){
  //   this.changeCvalidate(0);
  // },

  //生效日期变更 index就是insurePeriodIndex
  changeCvalidate: function(index){
    console.log(index);

    //默认为次日生效
    var planCvalidateType = "1";
    //取itemCode的生效日期类型或保障计划生效日期类型
    if (productDetailInfo.safeguardPlansInfo.length > 1 &&
      productDetailInfo.safeguardPlansInfo[index].planCvalidateType != undefined &&
      productDetailInfo.safeguardPlansInfo[index].planCvalidateType != "") {
      //当safeguardPlansInfo长度大于1，且对应Index中的planCvalidateType不为空的时候
      planCvalidateType = productDetailInfo.safeguardPlansInfo[index].planCvalidateType;
    } else {
      //当safeguardPlansInfo长度等于1
      //判断对应Index中的planCvalidateType不为空
      if (productDetailInfo.safeguardPlansInfo[index].planCvalidateType &&
        productDetailInfo.safeguardPlansInfo[index].planCvalidateType != "") {
        planCvalidateType = productDetailInfo.safeguardPlansInfo[index].planCvalidateType;
      } else {
        //使用insureInfo中的cvalidDateType作为生效日期类型
        if (productDetailInfo.insureInfo.cvalidDateType){
          planCvalidateType = productDetailInfo.insureInfo.cvalidDateType;
        }
      }
    }
    buyInfo.cvalidateType = planCvalidateType;
    console.log("选择生效日期类型：" + buyInfo.cvalidateType);

    //次日生效
    if (planCvalidateType == "1") {
      //在当前时间上+1天
      var currDate = new Date(new Date().getTime() + 24 * 3600000);
      var month = currDate.getMonth() < 9 ? ('0' + (currDate.getMonth() + 1)) : (currDate.getMonth() + 1);
      var day = currDate.getDate() < 10 ? ('0' + currDate.getDate()) : currDate.getDate();
      var fomateCurrDate = currDate.getFullYear() + "-" + month + "-" + day;
      this.setData({
        cvalidateStart: fomateCurrDate,
        cvalidateEnd: fomateCurrDate,
        cvalidateDefault: fomateCurrDate,
        cvalidateDisabled: true
      })
      orderInfo.cvalidDate = fomateCurrDate;
      console.log("选择生效日期：" + orderInfo.cvalidDate);
      //重置当前生效日期对应出生日期范围
      this.changeBirthdayPeriod();
    } else if (planCvalidateType == "3") {
      //当日生效
      //直接使用当天时间
      var currDate = new Date(new Date().getTime());
      var month = currDate.getMonth() < 9 ? ('0' + (currDate.getMonth() + 1)) : (currDate.getMonth() + 1);
      var day = currDate.getDate() < 10 ? ('0' + currDate.getDate()) : currDate.getDate();
      var fomateCurrDate = currDate.getFullYear() + "-" + month + "-" + day;
      this.setData({
        cvalidateStart: fomateCurrDate,
        cvalidateEnd: fomateCurrDate,
        cvalidateDefault: fomateCurrDate,
        cvalidateDisabled: true
      })
      orderInfo.cvalidDate = fomateCurrDate;
      console.log("选择生效日期：" + orderInfo.cvalidDate);
      //重置当前生效日期对应出生日期范围
      this.changeBirthdayPeriod();
    } else {
      //指定日期生效
      if (orderInfo.cvalidDate){
        if (new Date(productDetailInfo.insureInfo.cvalidDateRange.startDay).getTime() > new Date(orderInfo.cvalidDate).getTime() || new Date(orderInfo.cvalidDate).getTime() > new Date(productDetailInfo.insureInfo.cvalidDateRange.endDay).getTime()) {
          //生效日期有值并且不在可选范围内
          console.log("生效日期有值并且不在可选范围内");
          orderInfo.cvalidDate = productDetailInfo.insureInfo.cvalidDateRange.startDay;
          this.setData({
            cvalidateStart: productDetailInfo.insureInfo.cvalidDateRange.startDay,
            cvalidateEnd: productDetailInfo.insureInfo.cvalidDateRange.endDay,
            cvalidateDefault: productDetailInfo.insureInfo.cvalidDateRange.startDay
          })
        }else{
          //生效日期有值并且在可选范围内
          console.log("生效日期有值并且在可选范围内");
          this.setData({
            cvalidateStart: productDetailInfo.insureInfo.cvalidDateRange.startDay,
            cvalidateEnd: productDetailInfo.insureInfo.cvalidDateRange.endDay,
            cvalidateDefault: orderInfo.cvalidDate
          })
        }
      }else{
        console.log("生效日期没有值");
        orderInfo.cvalidDate = productDetailInfo.insureInfo.cvalidDateRange.startDay;
        this.setData({
          cvalidateStart: productDetailInfo.insureInfo.cvalidDateRange.startDay,
          cvalidateEnd: productDetailInfo.insureInfo.cvalidDateRange.endDay,
          cvalidateDefault: productDetailInfo.insureInfo.cvalidDateRange.startDay
        })
      }

      //重置当前生效日期对应出生日期范围
      this.changeBirthdayPeriod();
    }
  },

  //生效日期选择
  cvalidateChange: function (e) {
    console.log("选择生效日期： " + e.detail.value);
    this.setData({
      cvalidateDefault: e.detail.value
    })
    orderInfo.cvalidDate = e.detail.value;

    //重置当前生效日期对应出生日期范围
    this.changeBirthdayPeriod();
  },

  //初始化被保人性别渲染
  initSex:function(){
    if (productDetailInfo.insureInfo.sex != "1") {
      this.setData({
        sexShow: true,
      })

      if (!isLogin) { 
        console.log("未登录状态,默认先设置为1-男");
        buyInfo.sex = "1";
        this.setData({
          sex: "男"
        })
      }else{
        console.log("已登录状态");
        if (productDetailInfo.insureInfo.insuredType == "1") { 
          console.log("仅支持本人购买");
          insuredInfo.relationToAppnt = "00";
          buyInfo.relationToAppntLabel = "本人";
          insuredInfo.bnfLegalFlag = "1";

          //判断用户信息中性别是否有值
          var sex = null;
          //若customerInfo.sex就用
          console.log("customerInfo.sex: " + customerInfo.sex);
          if (customerInfo.sex != "" && customerInfo.sex != "0") {
            sex = customerInfo.sex;
          }
          //若customerInfo.idNoSex就用
          console.log("customerInfo.idNoSex: " + customerInfo.idNoSex);
          if (customerInfo.idNoSex != "" && customerInfo.idNoSex != "0") {
            sex = customerInfo.idNoSex;
          }
          //若之前有选择过性别，就用之前选择的
          console.log("buyInfo.sex: " + buyInfo.sex);
          if (buyInfo.sex) {
            sex = buyInfo.sex;
          }
          //如果都没有，默认设置为1-男，且可以变更；否则不能变更
          if (sex == null || sex == ""){
            console.log("都没有，默认设置为1-男，且可以变更");
            sex = "1";
            buyInfo.sex = sex;
            //性别可以选
            this.setData({
              sex: "男",
            })
          }else{
            console.log("有，且不可以变更");
            //将1-男2-女转变为0-男1-女
            var sexLabel = "男";
            if (sex == "2") {
              sexLabel = " 女";
            }
            //性别不能选
            this.setData({
              sex: sexLabel,
              sexDisable: true,
            })
          }
        }else{
          console.log("否，不仅支持本人购买，还支持其他关系人购买");
          var haveSelf = false;
          for (var i = 0; i < productDetailInfo.insureInfo.relationToAppnt.length; i++) {
            if (productDetailInfo.insureInfo.relationToAppnt[i].value == "00") {
              haveSelf = true;
              break;
              //如果被保人与投保人关系中包含本人，则判断如果登录用户信息中性别有值，则使用登录用户信息中性别初始化页面
            }
          }

          if (!haveSelf) {
            console.log("被保人与投保人关系中不包含本人");
            //默认先设置为1-男
            buyInfo.sex = "1";
            this.setData({
              sex: "男"
            })
          } else {
            console.log("被保人与投保人关系中包含本人");
            //判断用户信息中性别是否有值
            var sex = null;
            //若customerInfo.sex就用
            console.log("customerInfo.sex: " + customerInfo.sex);
            if (customerInfo.sex != "" && customerInfo.sex != "0") {
              sex = customerInfo.sex;
            }
            //若customerInfo.idNoSex就用
            console.log("customerInfo.idNoSex: " + customerInfo.idNoSex);
            if (customerInfo.idNoSex != "" && customerInfo.idNoSex != "0") {
              sex = customerInfo.idNoSex;
            }
            //若之前有选择过性别，就用之前选择的
            console.log("buyInfo.sex: " + buyInfo.sex);
            if (buyInfo.sex) {
              sex = buyInfo.sex;
            }
            //如果都没有，默认设置为1-男，且可以变更
            if (sex == null || sex == "") {
              console.log("都没有，默认设置为1-男，且可以变更");
              sex = "1";
              buyInfo.sex = sex;
              //性别可以选
              this.setData({
                sex: "男",
              })
            } else {
              console.log("有，且不可以变更");
              //将1-男2-女转变为0-男1-女
              var sexLabel = "男";
              if (sex == "2") {
                sexLabel = " 女";
              }
              //性别可以选
              this.setData({
                sex: sexLabel,
              })
            }
          }
        }
      }
    }
  },

  //变更被保人性别
  sexChange: function(e){
    console.log("选择性别: " + e.detail.value)
    this.setData({
      sex: e.detail.value
    })

    //将0-男1-女转变为1-男2-女
    var sex = "1"; // 1-男
    if (e.detail.value == "1") { //1-女
      sex = "2"; //2-女
    }

    //变更时覆盖buyInfo
    buyInfo.sex = sex;
    console.log(buyInfo.sex);

    //TODO 计算保费
  },

  //初始化被保人出生日期
  initBirthday:function(){
    //判断是否展示出生日期录入
    if (productDetailInfo.insureInfo.insuredAgePeriod) {
      this.setData({
        birthdayShow: true
      })
    }

    if (isLogin) {
      console.log("已登录状态");
      //判断insuredType是否仅支持本人投保
      if (productDetailInfo.insureInfo.insuredType == "1") {
        console.log("仅支持本人购买");
        //是，判断用户信息中出生日期是否有值，如果有值则使用用户信息中出生日期渲染页面
        var birthdayDefault = null;
        if (customerInfo.birthday != ""){
          birthdayDefault = customerInfo.birthday;
        }
        if (customerInfo.idNoBirthday != "") {
          birthdayDefault = customerInfo.idNoBirthday;
        }
        if (buyInfo.birthday != "") {
          birthdayDefault = buyInfo.birthday;
        }
        if (birthdayDefault == null){
          //取中间日期
          var time = new Date(buyInfo.insuredEndDate).getTime() - new Date(buyInfo.insuredBeginDate).getTime();
          var days = Math.floor(time / (24 * 3600 * 1000)) / 2;
          var midDate = new Date(new Date(buyInfo.insuredBeginDate).setDate(new Date(buyInfo.insuredBeginDate).getDate() + days));
          var month = midDate.getMonth() < 9 ? ('0' + (midDate.getMonth() + 1)) : (midDate.getMonth() + 1);
          var day = midDate.getDate() < 10 ? ('0' + midDate.getDate()) : midDate.getDate();
          birthdayDefault = midDate.getFullYear() + "-" + month + "-" + day;
        }

        this.setData({
          birthdayDefault: birthdayDefault,
          birthdayDisabled: true
        });
      } else if (productDetailInfo.insureInfo.insuredType == "2") {
        console.log("否，不仅支持本人购买，还支持其他关系人购买");
        //循环relationToAppnt
        //如果被保人与投保人关系中包含本人，则判断如果登录用户信息中出生日期有值，则使用登录用户信息中出生日期初始化页面
        var haveSelf = false;
        for (var i = 0; i < productDetailInfo.insureInfo.relationToAppnt.length; i++) {
          if (productDetailInfo.insureInfo.relationToAppnt[i].value == "00") {
            haveSelf = true;
            break;
          }
        }

        if (!haveSelf) {
          console.log("被保人与投保人关系中不包含本人");
          //取中间日期
          var time = new Date(buyInfo.insuredEndDate).getTime() - new Date(buyInfo.insuredBeginDate).getTime();
          var days = Math.floor(time / (24 * 3600 * 1000)) / 2;
          var midDate = new Date(new Date(buyInfo.insuredBeginDate).setDate(new Date(buyInfo.insuredBeginDate).getDate() + days));
          var month = midDate.getMonth() < 9 ? ('0' + (midDate.getMonth() + 1)) : (midDate.getMonth() + 1);
          var day = midDate.getDate() < 10 ? ('0' + midDate.getDate()) : midDate.getDate();
          var birthdayDefault = midDate.getFullYear() + "-" + month + "-" + day;

          this.setData({
            birthdayDefault: birthdayDefault
          });
        }else{
          console.log("被保人与投保人关系中包含本人");
          var birthdayDefault = null;
          if (customerInfo.birthday != "") {
            birthdayDefault = customerInfo.birthday;
          }
          if (customerInfo.idNoBirthday != "") {
            birthdayDefault = customerInfo.idNoBirthday;
          }
          if (buyInfo.birthday != "") {
            birthdayDefault = buyInfo.birthday;
          }
          if (birthdayDefault == null) {
            console.log(buyInfo.insuredEndDate);
            console.log(buyInfo.insuredBeginDate);
            //取中间日期
            var time = new Date(buyInfo.insuredEndDate).getTime() - new Date(buyInfo.insuredBeginDate).getTime();
            var days = Math.floor(time / (24 * 3600 * 1000)) / 2;
            var midDate = new Date(new Date(buyInfo.insuredBeginDate).setDate(new Date(buyInfo.insuredBeginDate).getDate() + days));
            var month = midDate.getMonth() < 9 ? ('0' + (midDate.getMonth() + 1)) : (midDate.getMonth() + 1);
            var day = midDate.getDate() < 10 ? ('0' + midDate.getDate()) : midDate.getDate();
            birthdayDefault = midDate.getFullYear() + "-" + month + "-" + day;
          }
          this.setData({
            birthdayDefault: birthdayDefault
          });
        }
      } 
    } else{
      console.log("未登录状态,默认先设置为30岁");
      var birthday = new Date(new Date().setYear(new Date().getYear() - 65))
      var month = birthday.getMonth() < 9 ? ('0' + (birthday.getMonth() + 1)) : (birthday.getMonth() + 1);
      var day = birthday.getDate() < 10 ? ('0' + birthday.getDate()) : birthday.getDate();
      var birthdayDefault = birthday.getFullYear() + "-" + month + "-" + day;
      this.setData({
        birthdayDefault: birthdayDefault
      });
    }
  },

  //调整被保人出生日期范围
  changeBirthdayPeriod: function(){
    console.log("调整被保人出生日期范围");
    var currDate = new Date(new Date().getTime());
    var month = currDate.getMonth() < 9 ? ('0' + (currDate.getMonth() + 1)) : (currDate.getMonth() + 1);
    var day = currDate.getDate() < 10 ? ('0' + currDate.getDate()) : currDate.getDate();
    var fomateCurrDate = currDate.getFullYear() + "-" + month + "-" + day;
    var startDay = "";
    var endDay = fomateCurrDate;
    console.log("endDay: " + endDay);

    console.log(productDetailInfo.insureInfo.insuredAgePeriod);
    if (productDetailInfo.insureInfo.insuredAgePeriod) {
      console.log("有被保人年龄范围");
      //投保起始年龄
      var beginParm_birth = productDetailInfo.insureInfo.insuredAgePeriod.beginBirth;
      // 投保结束年龄
      var endParm_birth = productDetailInfo.insureInfo.insuredAgePeriod.endBirth;
      //投保起始年龄单位
      var beginParmUnit_birth = productDetailInfo.insureInfo.insuredAgePeriod.beginBirthUnit;
      //投保结束年龄单位
      var endParmUnit_birth = productDetailInfo.insureInfo.insuredAgePeriod.endBirthUnit;
      var originDate = orderInfo.cvalidDate; //根据哪天开始算
      if (buyInfo.cvalidateType == "3"){
        originDate = new Date();
      }
      console.log("originDate: " + originDate);

      // 设置最小年龄限制
      var beginDate = new Date();
      if ("D" == beginParmUnit_birth) {
        beginDate = new Date(originDate).setDate(new Date(originDate).getDate() - parseInt(beginParm_birth));
      } else if ("Y" == beginParmUnit_birth) {
        beginDate = new Date(originDate).setFullYear((new Date(originDate).getFullYear() - parseInt(beginParm_birth))); 
      }
      beginDate = new Date(beginDate);
      console.log("beginDate: " + beginDate);
      // 设置最大年龄限制
      var endDate = new Date();
      if ("D" == endParmUnit_birth) {
        endDate = new Date(originDate).setDate(new Date(originDate).getDate() - parseInt(endParm_birth));
      } else if ("Y" == endParmUnit_birth) {
        endDate = new Date(originDate).setFullYear((new Date(originDate).getFullYear() - parseInt(endParm_birth) - parseInt("1"))); 
        endDate = new Date(endDate).setDate(new Date(endDate).getDate() + parseInt("1"));
      }
      endDate = new Date(endDate);
      console.log("endDate: " + endDate);

      //最小年龄设为生日结束时间
      var emonth = beginDate.getMonth() < 9 ? ('0' + (beginDate.getMonth() + 1)) : (beginDate.getMonth() + 1);
      var eday = beginDate.getDate() < 10 ? ('0' + beginDate.getDate()) : beginDate.getDate();
      endDay = beginDate.getFullYear() + "-" + emonth + "-" + eday;
      
      //最大年龄设为生日开始时间
      var smonth = endDate.getMonth() < 9 ? ('0' + (endDate.getMonth() + 1)) : (endDate.getMonth() + 1);
      var sday = endDate.getDate() < 10 ? ('0' + endDate.getDate()) : endDate.getDate();
      startDay = endDate.getFullYear() + "-" + smonth + "-" + sday;
      
    }else{
      console.log("没有被保人年龄范围");
      var endDate = new Date(new Date().setYear(new Date().getYear() - 65))
      var month = endDate.getMonth() < 9 ? ('0' + (endDate.getMonth() + 1)) : (endDate.getMonth() + 1);
      var day = endDate.getDate() < 10 ? ('0' + endDate.getDate()) : endDate.getDate();
      startDay = endDate.getFullYear() + "-" + month + "-" + day;
    }

    console.log("endDay: " + endDay);
    console.log("startDay: " + startDay);
    buyInfo.insuredBeginDate = startDay;
    buyInfo.insuredEndDate = endDay;

    this.setData({
      birthdayStart: startDay,
      birthdayEnd: endDay,
    })
  },

  //被保人生日选择
  changeBirthday: function (e) {
    console.log("被保人出生日期变更： " + e.detail.value);
    this.setData({
      birthdayDefault: e.detail.value
    })
    buyInfo.birthday = e.detail.value;

    //TODO 计算保费
  },

  //初始化积分抵扣渲染
  initPointsDeduction:function(){

  },

  //积分抵扣计算方法
  calPoint: function() {

  },

  //校验库存
  checkStockNum: function(){
    var planName = ""; //拿到选择的保障计划名称
    var mult = "";//购买份数

    var flag = true;
    if (planName == "") {
      //没配保障计划
      var stockNum = productDetailInfo.safeguardPlansInfo[0].stockNum;
      if (stockNum == null || (stockNum != "" && (parseInt(stockNum) < parseInt(mult)))) {
        //TODO 库存不足
        flag = false;
      } else {
        //TODO 有剩余库存
      }
    } else {
      //多个保障计划
      $.each(productDetailInfo.safeguardPlansInfo, function (k, v) {
        if (planName == v.planName) {
          var stockNum = v.stockNum;
          if (stockNum == null || (stockNum != "" && (parseInt(stockNum) < parseInt(mult)))) {
            //TODO 库存不足
            flag = false;
          } else {
            //TODO 有剩余库存
          }
          return false;
        }
      })
    }
    return flag;
  },

  //重置保障计划
  calInsurePlan: function () {
    this.setOrderInfo();
    this.setShowInfo();
    // 年龄
    var age = this.getAge(buyInfo.birthday);

    //TODO 获取TAB计划名称
    //TODO 把所有信息console出来

    if (orderInfo.cvalidDate != "" &&
      buyInfo.sex != "" &&
      (buyInfo.birthday != "" || productDetailInfo.insureInfo.insuredAgeRange.length == 0)) {

      }else{

      }

  },

  setOrderInfo: function () {

  },

  setShowInfo: function () {

  },

  //计算年龄
  getAge: function (birthDate) {
    console.log("年龄计算")
    console.log(birthDate);
    if (birthDate == undefined) {
      return "";//返回空
    }else{
      var insuredAgeType = ""; //TODO 获取生效日期类型
      var cvalidate = null; //TODO 获取生效日期

      // 生效日期
      var cvalidateArry = cvalidate.split("-");
      var cvalidateYear = cvalidateArry[0];
      var cvalidateMonth = cvalidateArry[1];
      var cvalidateDay = cvalidateArry[2];
      console.log("cvalidateYear: " + cvalidateYear);
      console.log("cvalidateMonth: " + cvalidateMonth);
      console.log("cvalidateDay: " + cvalidateDay);

      // 出生日期
      var birthDateArry = birthDate.split("-");
      var birthDateYear = birthDateArry[0];
      var birthDateMonth = birthDateArry[1];
      var birthDateDay = birthDateArry[2];
      console.log("birthDateYear: " + birthDateYear);
      console.log("birthDateMonth: " + birthDateMonth);
      console.log("birthDateDay: " + birthDateDay);

      console.log((parseInt(cvalidateYear) == parseInt(birthDateYear) + 1) &&
        (parseInt(cvalidateMonth) < parseInt(birthDateMonth)));
      console.log((parseInt(cvalidateYear) == parseInt(birthDateYear) + 1) &&
        (parseInt(cvalidateMonth) == parseInt(birthDateMonth)) &&
        (parseInt(cvalidateDay) <= parseInt(birthDateDay)));

      var oDate1 = new Date(cvalidateYear, cvalidateMonth - 1, cvalidateDay, 0, 0, 0);
      console.log("oDate1: " + oDate1);
      var oDate2 = new Date(birthDateYear, birthDateMonth - 1, birthDateDay, 0, 0, 0);
      console.log("oDate2: " + oDate2);
      returnAge = parseInt(Math.abs(oDate1 - oDate2) / 1000 / 60 / 60 / 24); //把相差的毫秒数转换为天数
      console.log("returnAge: " + returnAge + "D");

      // 计算年龄
      if (cvalidateYear == birthDateYear ||
        ((parseInt(cvalidateYear) == parseInt(birthDateYear) + 1) && (parseInt(cvalidateMonth) < parseInt(birthDateMonth))) ||
        ((parseInt(cvalidateYear) == parseInt(birthDateYear) + 1) && (parseInt(cvalidateMonth) == parseInt(birthDateMonth)) && (parseInt(cvalidateDay) <= parseInt(birthDateDay)))) {
        oDate1 = new Date(cvalidateYear, cvalidateMonth - 1, cvalidateDay, 0, 0, 0);
        console.log("oDate1: " + oDate1);
        oDate2 = new Date(birthDateYear, birthDateMonth - 1, birthDateDay, 0, 0, 0);
        console.log("oDate2: " + oDate2);
        var returnAge = parseInt(Math.abs(oDate1 - oDate2) / 1000 / 60 / 60 / 24); //把相差的毫秒数转换为天数
        console.log("returnAge: " + returnAge);
        returnAge += 'D';   // 计算出生了多少天
      } else {
        var ageDiff = cvalidateYear - birthDateYear; //年之差
        if (ageDiff > 0) {
          if (cvalidateMonth == birthDateMonth) {
            var dayDiff = cvalidateDay - birthDateDay;//日之差
            if (dayDiff < 0) {
              returnAge = ageDiff - 1;
            } else {
              returnAge = ageDiff;
            }
          } else {
            var monthDiff = cvalidateMonth - birthDateMonth;//月之差
            if (monthDiff < 0) {
              returnAge = ageDiff - 1;
            } else {
              returnAge = ageDiff;
            }
          }
          returnAge += 'Y';
        } else {
          returnAge = -1;//返回-1 表示出生日期输入错误 晚于今天
        }
      }
      console.log("周岁年龄：" + returnAge)
      insuredInfo.age = returnAge
      return returnAge;//返回周岁年龄
    } 
  },

  //校验被保人出生日期
  checkInsurdBirth: function () {
    
  },

  //计算保费
  calPrem: function (planName, insurePeriod, insurePeriodUnit, age, sex, payInterval, payIntervalType) {

  }
})